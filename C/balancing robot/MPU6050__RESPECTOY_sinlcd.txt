#include  <18f4550.h>
#FUSES    NOWDT,NOBROWNOUT,INTRC       
#use      delay(clock=8M)  
#use      I2C(master, sda=PIN_c6, scl=PIN_c7, slow)  //You can change, according your board ports
//#use      rs232(baud=9600,xmit=PIN_C6,rcv=PIN_C7)    //You can change, according your board ports
#include  "MPU6050.C"
#include  <math.h>
/*
#define LCD_ENABLE_PIN  PIN_D0                                
#define LCD_RS_PIN      PIN_D1                                   
#define LCD_RW_PIN      PIN_D2                                  
#define LCD_DATA4       PIN_D4                                   
#define LCD_DATA5       PIN_D5                                  
#define LCD_DATA6       PIN_D6                                    
#define LCD_DATA7       PIN_D7
#include  <lcd.c>
*/
#include <stdlib.h>

signed int8 A_data[6];
signed int8 G_data[2];
signed int16 ax=0,ay=0,az=0;
signed int16 gy=0;
float velocidad_gy=0;
float ang_y=0,ana_x=0,ana_y=0,ana_z=0,a_y=0;

//float valor_timer=0,theta_d=0,dtheta_d=0,kp1=2.4,kd1=0.08,ki1=2.4,kp2=2.4*3.375,kd2=0.08*3.375,ki2=2.4*3.375;
//float valor_timer=0,theta_d=0,dtheta_d=0,kp1=3.8,kd1=0.1,ki1=10.,kp2=kp1*3.375,kd2=kd1*3.375,ki2=ki1*3.375;
float valor_timer=0,theta_d=0.,dtheta_d=0,kp1=3.8,kd1=0.08,ki1=10.,kp2=kp1*3.375,kd2=kd1*3.375,ki2=ki1*3.375;
unsigned int32 duty_i=0,duty_d=0;
unsigned int8 duty_i_8=0,duty_d_8=0;
int8 duty=0;
//Valor de los offsets
signed int32 ax_o=0,ay_o=0,az_o=0;
signed int32 gy_o=0;
void eeprom();
void reinicio();
int guardado=0;

#int_TIMER1
void TIMER1_A()
{  
   //output_toggle(pin_b5);
   valor_timer=(4./8000000.)*(8.)*(65536-get_timer1());
   gy=make16(G_data[0],G_data[1])-gy_o;

   ang_y=0.0205*((250.*gy)/32768.);
   velocidad_gy=((250.*gy)/32768.);


   ax=make16(A_data[0],A_data[1])-ax_o;      
   ay=make16(A_data[2],A_data[3])-ay_o;     
   az=make16(A_data[4],A_data[5])+az_o;   
   ana_x=(9.81*ax)/16384.;
   ana_y=(9.81*ay)/16384.;
   ana_z=(9.81*az)/16384.;
   
//   ana_x=atan2(ana_y,sqrt(ana_x*ana_x+ana_z*ana_z))*(180.0/3.1416);
   ana_y=(-atan2(ana_x,sqrt(ana_y*ana_y+ana_z*ana_z)))*(180.0/3.1416);
   
   a_y=0.98*(a_y+ang_y)+0.02*(ana_y);   

   A_data[0]=mpu6050_read(0x3B); //Read X axis(LSB)
   A_data[1]=mpu6050_read(0x3C); //Read X axis(MSB)
   A_data[2]=mpu6050_read(0x3D); //Read Y axis(LSB)
   A_data[3]=mpu6050_read(0x3E); //Read Y axis(MSB)
   A_data[4]=mpu6050_read(0x3F); //Read Z axis(LSB)
   A_data[5]=mpu6050_read(0x40); //Read Z axis(MSB)

    
   G_data[0]=mpu6050_read(0x45); //Read Y axis(LSB)
   G_data[1]=mpu6050_read(0x46); //Read Y axis(MSB)
   

    set_timer1(63536);
  //valor_timer=(4./8000000.)*(8.)*(65536-get_timer1());
  
}

int interno=49;

#INT_EXT
void al()
{
   guardado=read_eeprom(12);
   if (guardado==49||guardado==-1)
   {
      for (int aaa=0;aaa<3;aaa++)
         {
            output_toggle(pin_b4);
            delay_ms(250);
         }
      eeprom();
      write_eeprom(12,30);
   }
   else 
   {
      output_low(pin_b4);
      write_eeprom(0,49);
      reinicio();
      write_eeprom(12,49);
   }
}

void main()
{
/*
lcd_init();
printf(lcd_putc,"\f");
printf(lcd_putc," MPU6050 Gyro   \n");
printf(lcd_putc," Accelerometer  ");
delay_ms(1000);
printf(lcd_putc,"\f");
*/

interno=read_eeprom(0);
mpu6050_init();    

mpu6050_write(0x1A,0);

if (interno==49||interno==-1)
   {
      reinicio();   
   }
  else 
  {
         output_high(pin_b4);
         int ane[3];
         int as;
         ane[0]=read_eeprom(81);
         ane[1]=read_eeprom(82);
         as=read_eeprom(110);
         gy_o=make16(ane[1],ane[0]);
         if (as==50)
            {
               gy_o*=-1;
            }
         ane[2]=0;
         ane[0]=read_eeprom(83);
         ane[1]=read_eeprom(84);
         ane[2]=read_eeprom(2);
         ax_o=make16(ane[1],ane[0]);
            if (ane[2]==1)
            {
               ax_o*=-1;
            }
         ane[2]=0;
         ane[0]=read_eeprom(85);
         ane[1]=read_eeprom(86);
         ane[2]=read_eeprom(3);
         ay_o=make16(ane[1],ane[0]);
            if (ane[2]==1)
            {
               ay_o*=-1;
            }
         ane[2]=0;
         ane[0]=read_eeprom(87);
         ane[1]=read_eeprom(88);
         ane[2]=read_eeprom(4);
         az_o=make16(ane[1],ane[0]);
            if (ane[2]==1)
            {
               az_o*=-1;
            }
  
  }

   setup_ccp1(ccp_pwm);
   setup_ccp2(ccp_pwm);
   
   enable_interrupts(INT_TIMER1);
   enable_interrupts(INT_EXT);
   enable_interrupts(GLOBAL);
//   setup_timer_0(RTCC_INTERNAL|RTCC_DIV_256);   
   setup_timer_1 (T1_INTERNAL | T1_DIV_BY_8);
   setup_timer_2(T2_DIV_BY_1,255,1); 
   set_timer1(63536);

   while(TRUE)
   {  
   
   //A1 son del motor derecho (cinta)   pin 7  verde
   //A2 son del motor derecho           pin 8  azul
   //A3 son del motor izquierdo (cinta) pin 4  amarillo
   //A4 son del motor izquierdo         pin 9  fosforecente
   //blanco=voltaje, amarillo y naranja=tierra
   if(a_y<0)
   {  
      output_low(pin_A2);
      output_low(pin_A4);
      output_high(pin_A1);  // anti clockwise
      output_high(pin_A3);  //clockwise
   }else if(a_y>0)
   {
      output_low(pin_A1);
      output_low(pin_A3);
      output_high(pin_A2);  //clockwise
      output_high(pin_A4);  //anti clockwise
   }
   int da=17;
   duty=255;
   duty_i=abs(((duty-da)/8.)*(0.131625)*(kp1*(a_y-theta_d)+kd1*(velocidad_gy-dtheta_d)+ki1*(0.0205*(a_y-theta_d))))+da;
   duty_d=abs(((duty-da)/8.)*(0.039)*(kp2*(a_y-theta_d)+kd2*(velocidad_gy-dtheta_d)+ki2*(0.0205*(a_y-theta_d))))+da;

   if(duty_i>=200 || duty_d>=200)
      {
         duty_i=200;
         duty_d=200;
      }      
      
   duty_i_8=duty_i;
   duty_d_8=duty_d;
   
   set_pwm1_duty(duty_i_8);    //naranja
   set_pwm2_duty(duty_d_8);   //morado
   
   if((abs(a_y*10))<1)
   {
      ang_y=0;
      a_y=0;
      output_toggle(pin_b3);
      set_pwm1_duty(0);    //naranja
      set_pwm2_duty(0);   //morado
   
   }
   //   set_pwm1_duty(20);    //naranja
     // set_pwm2_duty(20);   //morado
   //a
/* 
   printf(lcd_putc,"\f%.3f  %0.3f    \n",a_y,ang_y);
   printf(lcd_putc,"%0.3f  ",ana_y);    
 */  
 //  output_toggle(pin_b3);
 //  delay_ms(100);

   }
}


void eeprom()
{ 
         signed int32 ar;
         unsigned int a,b;
         
         write_eeprom(0,0);
         
         ar=gy_o;
         if (ar<0)
            {
               ar=ar*(-1);
               write_eeprom(110,50);
            }
         a=ar;
         b=ar>>8;
         write_eeprom(81,a);  
         write_eeprom(82,b);
         
         
         ar=ax_o;
         if (ar<0)
            {
               ar=ar*(-1);
               write_eeprom(2,1);
            }
         a=ar;
         b=ar>>8;
         write_eeprom(83,a);
         write_eeprom(84,b);
         
         ar=ay_o;
         if (ar<0)
            {
               ar=ar*(-1);
               write_eeprom(3,1);
            }
         a=ar;
         b=ar>>8;
         write_eeprom(85,a);
         write_eeprom(86,b);
         
         ar=az_o;
         if (ar<0)
            {
               ar=ar*(-1);
               write_eeprom(4,1);
            }
         a=ar;
         b=ar>>8;
         write_eeprom(87,a);
         write_eeprom(88,b);    
}
void reinicio()
{  
   set_pwm1_duty(0);    //naranja
   set_pwm2_duty(0);   //morado

   for(int32 i=0;i<3000;i++)
      {  
         G_data[0]=mpu6050_read(0x45); //Read X axis(LSB)
         G_data[1]=mpu6050_read(0x46); //Read X axis(MSB)
         A_data[0]=mpu6050_read(0x3B); //Read X axis(LSB)
         A_data[1]=mpu6050_read(0x3C); //Read X axis(MSB)
         A_data[2]=mpu6050_read(0x3D); //Read Y axis(LSB)
         A_data[3]=mpu6050_read(0x3E); //Read Y axis(MSB)
         A_data[4]=mpu6050_read(0x3F); //Read Z axis(LSB)
         A_data[5]=mpu6050_read(0x40); //Read Z axis(MSB)
         gy=make16(G_data[0],G_data[1]);
         ax=make16(A_data[0],A_data[1]);
         ay=make16(A_data[2],A_data[3]);
         az=make16(A_data[4],A_data[5]);
         gy_o+=gy;
         ax_o+=ax;
         ay_o+=ay;
         az_o+=az;    
         
         if(i%100==0)
            output_toggle(pin_a0);
      }
      output_low(pin_a0);
      gy_o=gy_o/3000;
      ax_o=ax_o/3000;
      ay_o=ay_o/3000;
      az_o=16384-az_o/3000;
}